// Code generated by mocktail; DO NOT EDIT.

package metrics

import (
	"testing"
	"time"

	"github.com/stretchr/testify/mock"
)

// dataPointGroupIteratorMock mock of DataPointGroupIterator.
type dataPointGroupIteratorMock struct{ mock.Mock }

// newDataPointGroupIteratorMock creates a new dataPointGroupIteratorMock.
func newDataPointGroupIteratorMock(tb testing.TB) *dataPointGroupIteratorMock {
	tb.Helper()

	m := &dataPointGroupIteratorMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *dataPointGroupIteratorMock) ForEach(tbl string, fn ForEachFunc) {
	_m.Called(tbl, fn)
}

func (_m *dataPointGroupIteratorMock) OnForEach(tbl string, fn ForEachFunc) *dataPointGroupIteratorForEachCall {
	return &dataPointGroupIteratorForEachCall{Call: _m.Mock.On("ForEach", tbl, fn), Parent: _m}
}

func (_m *dataPointGroupIteratorMock) OnForEachRaw(tbl interface{}, fn interface{}) *dataPointGroupIteratorForEachCall {
	return &dataPointGroupIteratorForEachCall{Call: _m.Mock.On("ForEach", tbl, fn), Parent: _m}
}

type dataPointGroupIteratorForEachCall struct {
	*mock.Call
	Parent *dataPointGroupIteratorMock
}

func (_c *dataPointGroupIteratorForEachCall) Panic(msg string) *dataPointGroupIteratorForEachCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *dataPointGroupIteratorForEachCall) Once() *dataPointGroupIteratorForEachCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *dataPointGroupIteratorForEachCall) Twice() *dataPointGroupIteratorForEachCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *dataPointGroupIteratorForEachCall) Times(i int) *dataPointGroupIteratorForEachCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *dataPointGroupIteratorForEachCall) WaitUntil(w <-chan time.Time) *dataPointGroupIteratorForEachCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *dataPointGroupIteratorForEachCall) After(d time.Duration) *dataPointGroupIteratorForEachCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *dataPointGroupIteratorForEachCall) Run(fn func(args mock.Arguments)) *dataPointGroupIteratorForEachCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *dataPointGroupIteratorForEachCall) Maybe() *dataPointGroupIteratorForEachCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *dataPointGroupIteratorForEachCall) TypedRun(fn func(string, ForEachFunc)) *dataPointGroupIteratorForEachCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_tbl := args.String(0)
		_fn, _ := args.Get(1).(ForEachFunc)
		fn(_tbl, _fn)
	})
	return _c
}

func (_c *dataPointGroupIteratorForEachCall) OnForEach(tbl string, fn ForEachFunc) *dataPointGroupIteratorForEachCall {
	return _c.Parent.OnForEach(tbl, fn)
}

func (_c *dataPointGroupIteratorForEachCall) OnForEachRaw(tbl interface{}, fn interface{}) *dataPointGroupIteratorForEachCall {
	return _c.Parent.OnForEachRaw(tbl, fn)
}
