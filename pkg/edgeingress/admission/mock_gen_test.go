// Code generated by mocktail; DO NOT EDIT.

package admission

import (
	"context"
	"testing"
	"time"

	"github.com/stretchr/testify/mock"
	"github.com/traefik/hub-agent-kubernetes/pkg/edgeingress"
	"github.com/traefik/hub-agent-kubernetes/pkg/platform"
)

// backendMock mock of Backend.
type backendMock struct{ mock.Mock }

// newBackendMock creates a new backendMock.
func newBackendMock(tb testing.TB) *backendMock {
	tb.Helper()

	m := &backendMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *backendMock) CreateEdgeIngress(_ context.Context, ing *platform.CreateEdgeIngressReq) (*edgeingress.EdgeIngress, error) {
	_ret := _m.Called(ing)

	if _rf, ok := _ret.Get(0).(func(*platform.CreateEdgeIngressReq) (*edgeingress.EdgeIngress, error)); ok {
		return _rf(ing)
	}

	_ra0, _ := _ret.Get(0).(*edgeingress.EdgeIngress)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *backendMock) OnCreateEdgeIngress(ing *platform.CreateEdgeIngressReq) *backendCreateEdgeIngressCall {
	return &backendCreateEdgeIngressCall{Call: _m.Mock.On("CreateEdgeIngress", ing), Parent: _m}
}

func (_m *backendMock) OnCreateEdgeIngressRaw(ing interface{}) *backendCreateEdgeIngressCall {
	return &backendCreateEdgeIngressCall{Call: _m.Mock.On("CreateEdgeIngress", ing), Parent: _m}
}

type backendCreateEdgeIngressCall struct {
	*mock.Call
	Parent *backendMock
}

func (_c *backendCreateEdgeIngressCall) Panic(msg string) *backendCreateEdgeIngressCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *backendCreateEdgeIngressCall) Once() *backendCreateEdgeIngressCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *backendCreateEdgeIngressCall) Twice() *backendCreateEdgeIngressCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *backendCreateEdgeIngressCall) Times(i int) *backendCreateEdgeIngressCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *backendCreateEdgeIngressCall) WaitUntil(w <-chan time.Time) *backendCreateEdgeIngressCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *backendCreateEdgeIngressCall) After(d time.Duration) *backendCreateEdgeIngressCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *backendCreateEdgeIngressCall) Run(fn func(args mock.Arguments)) *backendCreateEdgeIngressCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *backendCreateEdgeIngressCall) Maybe() *backendCreateEdgeIngressCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *backendCreateEdgeIngressCall) TypedReturns(a *edgeingress.EdgeIngress, b error) *backendCreateEdgeIngressCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *backendCreateEdgeIngressCall) ReturnsFn(fn func(*platform.CreateEdgeIngressReq) (*edgeingress.EdgeIngress, error)) *backendCreateEdgeIngressCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *backendCreateEdgeIngressCall) TypedRun(fn func(*platform.CreateEdgeIngressReq)) *backendCreateEdgeIngressCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_ing, _ := args.Get(0).(*platform.CreateEdgeIngressReq)
		fn(_ing)
	})
	return _c
}

func (_c *backendCreateEdgeIngressCall) OnCreateEdgeIngress(ing *platform.CreateEdgeIngressReq) *backendCreateEdgeIngressCall {
	return _c.Parent.OnCreateEdgeIngress(ing)
}

func (_c *backendCreateEdgeIngressCall) OnDeleteEdgeIngress(namespace string, name string, lastKnownVersion string) *backendDeleteEdgeIngressCall {
	return _c.Parent.OnDeleteEdgeIngress(namespace, name, lastKnownVersion)
}

func (_c *backendCreateEdgeIngressCall) OnUpdateEdgeIngress(namespace string, name string, lastKnownVersion string, updateReq *platform.UpdateEdgeIngressReq) *backendUpdateEdgeIngressCall {
	return _c.Parent.OnUpdateEdgeIngress(namespace, name, lastKnownVersion, updateReq)
}

func (_c *backendCreateEdgeIngressCall) OnCreateEdgeIngressRaw(ing interface{}) *backendCreateEdgeIngressCall {
	return _c.Parent.OnCreateEdgeIngressRaw(ing)
}

func (_c *backendCreateEdgeIngressCall) OnDeleteEdgeIngressRaw(namespace interface{}, name interface{}, lastKnownVersion interface{}) *backendDeleteEdgeIngressCall {
	return _c.Parent.OnDeleteEdgeIngressRaw(namespace, name, lastKnownVersion)
}

func (_c *backendCreateEdgeIngressCall) OnUpdateEdgeIngressRaw(namespace interface{}, name interface{}, lastKnownVersion interface{}, updateReq interface{}) *backendUpdateEdgeIngressCall {
	return _c.Parent.OnUpdateEdgeIngressRaw(namespace, name, lastKnownVersion, updateReq)
}

func (_m *backendMock) DeleteEdgeIngress(_ context.Context, namespace string, name string, lastKnownVersion string) error {
	_ret := _m.Called(namespace, name, lastKnownVersion)

	if _rf, ok := _ret.Get(0).(func(string, string, string) error); ok {
		return _rf(namespace, name, lastKnownVersion)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *backendMock) OnDeleteEdgeIngress(namespace string, name string, lastKnownVersion string) *backendDeleteEdgeIngressCall {
	return &backendDeleteEdgeIngressCall{Call: _m.Mock.On("DeleteEdgeIngress", namespace, name, lastKnownVersion), Parent: _m}
}

func (_m *backendMock) OnDeleteEdgeIngressRaw(namespace interface{}, name interface{}, lastKnownVersion interface{}) *backendDeleteEdgeIngressCall {
	return &backendDeleteEdgeIngressCall{Call: _m.Mock.On("DeleteEdgeIngress", namespace, name, lastKnownVersion), Parent: _m}
}

type backendDeleteEdgeIngressCall struct {
	*mock.Call
	Parent *backendMock
}

func (_c *backendDeleteEdgeIngressCall) Panic(msg string) *backendDeleteEdgeIngressCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *backendDeleteEdgeIngressCall) Once() *backendDeleteEdgeIngressCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *backendDeleteEdgeIngressCall) Twice() *backendDeleteEdgeIngressCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *backendDeleteEdgeIngressCall) Times(i int) *backendDeleteEdgeIngressCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *backendDeleteEdgeIngressCall) WaitUntil(w <-chan time.Time) *backendDeleteEdgeIngressCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *backendDeleteEdgeIngressCall) After(d time.Duration) *backendDeleteEdgeIngressCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *backendDeleteEdgeIngressCall) Run(fn func(args mock.Arguments)) *backendDeleteEdgeIngressCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *backendDeleteEdgeIngressCall) Maybe() *backendDeleteEdgeIngressCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *backendDeleteEdgeIngressCall) TypedReturns(a error) *backendDeleteEdgeIngressCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *backendDeleteEdgeIngressCall) ReturnsFn(fn func(string, string, string) error) *backendDeleteEdgeIngressCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *backendDeleteEdgeIngressCall) TypedRun(fn func(string, string, string)) *backendDeleteEdgeIngressCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_namespace := args.String(0)
		_name := args.String(1)
		_lastKnownVersion := args.String(2)
		fn(_namespace, _name, _lastKnownVersion)
	})
	return _c
}

func (_c *backendDeleteEdgeIngressCall) OnCreateEdgeIngress(ing *platform.CreateEdgeIngressReq) *backendCreateEdgeIngressCall {
	return _c.Parent.OnCreateEdgeIngress(ing)
}

func (_c *backendDeleteEdgeIngressCall) OnDeleteEdgeIngress(namespace string, name string, lastKnownVersion string) *backendDeleteEdgeIngressCall {
	return _c.Parent.OnDeleteEdgeIngress(namespace, name, lastKnownVersion)
}

func (_c *backendDeleteEdgeIngressCall) OnUpdateEdgeIngress(namespace string, name string, lastKnownVersion string, updateReq *platform.UpdateEdgeIngressReq) *backendUpdateEdgeIngressCall {
	return _c.Parent.OnUpdateEdgeIngress(namespace, name, lastKnownVersion, updateReq)
}

func (_c *backendDeleteEdgeIngressCall) OnCreateEdgeIngressRaw(ing interface{}) *backendCreateEdgeIngressCall {
	return _c.Parent.OnCreateEdgeIngressRaw(ing)
}

func (_c *backendDeleteEdgeIngressCall) OnDeleteEdgeIngressRaw(namespace interface{}, name interface{}, lastKnownVersion interface{}) *backendDeleteEdgeIngressCall {
	return _c.Parent.OnDeleteEdgeIngressRaw(namespace, name, lastKnownVersion)
}

func (_c *backendDeleteEdgeIngressCall) OnUpdateEdgeIngressRaw(namespace interface{}, name interface{}, lastKnownVersion interface{}, updateReq interface{}) *backendUpdateEdgeIngressCall {
	return _c.Parent.OnUpdateEdgeIngressRaw(namespace, name, lastKnownVersion, updateReq)
}

func (_m *backendMock) UpdateEdgeIngress(_ context.Context, namespace string, name string, lastKnownVersion string, updateReq *platform.UpdateEdgeIngressReq) (*edgeingress.EdgeIngress, error) {
	_ret := _m.Called(namespace, name, lastKnownVersion, updateReq)

	if _rf, ok := _ret.Get(0).(func(string, string, string, *platform.UpdateEdgeIngressReq) (*edgeingress.EdgeIngress, error)); ok {
		return _rf(namespace, name, lastKnownVersion, updateReq)
	}

	_ra0, _ := _ret.Get(0).(*edgeingress.EdgeIngress)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *backendMock) OnUpdateEdgeIngress(namespace string, name string, lastKnownVersion string, updateReq *platform.UpdateEdgeIngressReq) *backendUpdateEdgeIngressCall {
	return &backendUpdateEdgeIngressCall{Call: _m.Mock.On("UpdateEdgeIngress", namespace, name, lastKnownVersion, updateReq), Parent: _m}
}

func (_m *backendMock) OnUpdateEdgeIngressRaw(namespace interface{}, name interface{}, lastKnownVersion interface{}, updateReq interface{}) *backendUpdateEdgeIngressCall {
	return &backendUpdateEdgeIngressCall{Call: _m.Mock.On("UpdateEdgeIngress", namespace, name, lastKnownVersion, updateReq), Parent: _m}
}

type backendUpdateEdgeIngressCall struct {
	*mock.Call
	Parent *backendMock
}

func (_c *backendUpdateEdgeIngressCall) Panic(msg string) *backendUpdateEdgeIngressCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *backendUpdateEdgeIngressCall) Once() *backendUpdateEdgeIngressCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *backendUpdateEdgeIngressCall) Twice() *backendUpdateEdgeIngressCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *backendUpdateEdgeIngressCall) Times(i int) *backendUpdateEdgeIngressCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *backendUpdateEdgeIngressCall) WaitUntil(w <-chan time.Time) *backendUpdateEdgeIngressCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *backendUpdateEdgeIngressCall) After(d time.Duration) *backendUpdateEdgeIngressCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *backendUpdateEdgeIngressCall) Run(fn func(args mock.Arguments)) *backendUpdateEdgeIngressCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *backendUpdateEdgeIngressCall) Maybe() *backendUpdateEdgeIngressCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *backendUpdateEdgeIngressCall) TypedReturns(a *edgeingress.EdgeIngress, b error) *backendUpdateEdgeIngressCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *backendUpdateEdgeIngressCall) ReturnsFn(fn func(string, string, string, *platform.UpdateEdgeIngressReq) (*edgeingress.EdgeIngress, error)) *backendUpdateEdgeIngressCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *backendUpdateEdgeIngressCall) TypedRun(fn func(string, string, string, *platform.UpdateEdgeIngressReq)) *backendUpdateEdgeIngressCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_namespace := args.String(0)
		_name := args.String(1)
		_lastKnownVersion := args.String(2)
		_updateReq, _ := args.Get(3).(*platform.UpdateEdgeIngressReq)
		fn(_namespace, _name, _lastKnownVersion, _updateReq)
	})
	return _c
}

func (_c *backendUpdateEdgeIngressCall) OnCreateEdgeIngress(ing *platform.CreateEdgeIngressReq) *backendCreateEdgeIngressCall {
	return _c.Parent.OnCreateEdgeIngress(ing)
}

func (_c *backendUpdateEdgeIngressCall) OnDeleteEdgeIngress(namespace string, name string, lastKnownVersion string) *backendDeleteEdgeIngressCall {
	return _c.Parent.OnDeleteEdgeIngress(namespace, name, lastKnownVersion)
}

func (_c *backendUpdateEdgeIngressCall) OnUpdateEdgeIngress(namespace string, name string, lastKnownVersion string, updateReq *platform.UpdateEdgeIngressReq) *backendUpdateEdgeIngressCall {
	return _c.Parent.OnUpdateEdgeIngress(namespace, name, lastKnownVersion, updateReq)
}

func (_c *backendUpdateEdgeIngressCall) OnCreateEdgeIngressRaw(ing interface{}) *backendCreateEdgeIngressCall {
	return _c.Parent.OnCreateEdgeIngressRaw(ing)
}

func (_c *backendUpdateEdgeIngressCall) OnDeleteEdgeIngressRaw(namespace interface{}, name interface{}, lastKnownVersion interface{}) *backendDeleteEdgeIngressCall {
	return _c.Parent.OnDeleteEdgeIngressRaw(namespace, name, lastKnownVersion)
}

func (_c *backendUpdateEdgeIngressCall) OnUpdateEdgeIngressRaw(namespace interface{}, name interface{}, lastKnownVersion interface{}, updateReq interface{}) *backendUpdateEdgeIngressCall {
	return _c.Parent.OnUpdateEdgeIngressRaw(namespace, name, lastKnownVersion, updateReq)
}
