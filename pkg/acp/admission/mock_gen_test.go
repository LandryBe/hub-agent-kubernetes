// Code generated by mocktail; DO NOT EDIT.

package admission

import (
	"context"
	"testing"
	"time"

	"github.com/stretchr/testify/mock"
	"github.com/traefik/hub-agent-kubernetes/pkg/acp"
	"github.com/traefik/hub-agent-kubernetes/pkg/crd/api/hub/v1alpha1"
	"k8s.io/api/admission/v1"
)

// backendMock mock of Backend.
type backendMock struct{ mock.Mock }

// newBackendMock creates a new backendMock.
func newBackendMock(tb testing.TB) *backendMock {
	tb.Helper()

	m := &backendMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *backendMock) CreateACP(_ context.Context, policy *v1alpha1.AccessControlPolicy) (*acp.ACP, error) {
	_ret := _m.Called(policy)

	if _rf, ok := _ret.Get(0).(func(*v1alpha1.AccessControlPolicy) (*acp.ACP, error)); ok {
		return _rf(policy)
	}

	_ra0, _ := _ret.Get(0).(*acp.ACP)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *backendMock) OnCreateACP(policy *v1alpha1.AccessControlPolicy) *backendCreateACPCall {
	return &backendCreateACPCall{Call: _m.Mock.On("CreateACP", policy), Parent: _m}
}

func (_m *backendMock) OnCreateACPRaw(policy interface{}) *backendCreateACPCall {
	return &backendCreateACPCall{Call: _m.Mock.On("CreateACP", policy), Parent: _m}
}

type backendCreateACPCall struct {
	*mock.Call
	Parent *backendMock
}

func (_c *backendCreateACPCall) Panic(msg string) *backendCreateACPCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *backendCreateACPCall) Once() *backendCreateACPCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *backendCreateACPCall) Twice() *backendCreateACPCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *backendCreateACPCall) Times(i int) *backendCreateACPCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *backendCreateACPCall) WaitUntil(w <-chan time.Time) *backendCreateACPCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *backendCreateACPCall) After(d time.Duration) *backendCreateACPCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *backendCreateACPCall) Run(fn func(args mock.Arguments)) *backendCreateACPCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *backendCreateACPCall) Maybe() *backendCreateACPCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *backendCreateACPCall) TypedReturns(a *acp.ACP, b error) *backendCreateACPCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *backendCreateACPCall) ReturnsFn(fn func(*v1alpha1.AccessControlPolicy) (*acp.ACP, error)) *backendCreateACPCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *backendCreateACPCall) TypedRun(fn func(*v1alpha1.AccessControlPolicy)) *backendCreateACPCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_policy, _ := args.Get(0).(*v1alpha1.AccessControlPolicy)
		fn(_policy)
	})
	return _c
}

func (_c *backendCreateACPCall) OnCreateACP(policy *v1alpha1.AccessControlPolicy) *backendCreateACPCall {
	return _c.Parent.OnCreateACP(policy)
}

func (_c *backendCreateACPCall) OnDeleteACP(oldVersion string, name string) *backendDeleteACPCall {
	return _c.Parent.OnDeleteACP(oldVersion, name)
}

func (_c *backendCreateACPCall) OnUpdateACP(oldVersion string, policy *v1alpha1.AccessControlPolicy) *backendUpdateACPCall {
	return _c.Parent.OnUpdateACP(oldVersion, policy)
}

func (_c *backendCreateACPCall) OnCreateACPRaw(policy interface{}) *backendCreateACPCall {
	return _c.Parent.OnCreateACPRaw(policy)
}

func (_c *backendCreateACPCall) OnDeleteACPRaw(oldVersion interface{}, name interface{}) *backendDeleteACPCall {
	return _c.Parent.OnDeleteACPRaw(oldVersion, name)
}

func (_c *backendCreateACPCall) OnUpdateACPRaw(oldVersion interface{}, policy interface{}) *backendUpdateACPCall {
	return _c.Parent.OnUpdateACPRaw(oldVersion, policy)
}

func (_m *backendMock) DeleteACP(_ context.Context, oldVersion string, name string) error {
	_ret := _m.Called(oldVersion, name)

	if _rf, ok := _ret.Get(0).(func(string, string) error); ok {
		return _rf(oldVersion, name)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *backendMock) OnDeleteACP(oldVersion string, name string) *backendDeleteACPCall {
	return &backendDeleteACPCall{Call: _m.Mock.On("DeleteACP", oldVersion, name), Parent: _m}
}

func (_m *backendMock) OnDeleteACPRaw(oldVersion interface{}, name interface{}) *backendDeleteACPCall {
	return &backendDeleteACPCall{Call: _m.Mock.On("DeleteACP", oldVersion, name), Parent: _m}
}

type backendDeleteACPCall struct {
	*mock.Call
	Parent *backendMock
}

func (_c *backendDeleteACPCall) Panic(msg string) *backendDeleteACPCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *backendDeleteACPCall) Once() *backendDeleteACPCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *backendDeleteACPCall) Twice() *backendDeleteACPCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *backendDeleteACPCall) Times(i int) *backendDeleteACPCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *backendDeleteACPCall) WaitUntil(w <-chan time.Time) *backendDeleteACPCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *backendDeleteACPCall) After(d time.Duration) *backendDeleteACPCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *backendDeleteACPCall) Run(fn func(args mock.Arguments)) *backendDeleteACPCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *backendDeleteACPCall) Maybe() *backendDeleteACPCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *backendDeleteACPCall) TypedReturns(a error) *backendDeleteACPCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *backendDeleteACPCall) ReturnsFn(fn func(string, string) error) *backendDeleteACPCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *backendDeleteACPCall) TypedRun(fn func(string, string)) *backendDeleteACPCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_oldVersion := args.String(0)
		_name := args.String(1)
		fn(_oldVersion, _name)
	})
	return _c
}

func (_c *backendDeleteACPCall) OnCreateACP(policy *v1alpha1.AccessControlPolicy) *backendCreateACPCall {
	return _c.Parent.OnCreateACP(policy)
}

func (_c *backendDeleteACPCall) OnDeleteACP(oldVersion string, name string) *backendDeleteACPCall {
	return _c.Parent.OnDeleteACP(oldVersion, name)
}

func (_c *backendDeleteACPCall) OnUpdateACP(oldVersion string, policy *v1alpha1.AccessControlPolicy) *backendUpdateACPCall {
	return _c.Parent.OnUpdateACP(oldVersion, policy)
}

func (_c *backendDeleteACPCall) OnCreateACPRaw(policy interface{}) *backendCreateACPCall {
	return _c.Parent.OnCreateACPRaw(policy)
}

func (_c *backendDeleteACPCall) OnDeleteACPRaw(oldVersion interface{}, name interface{}) *backendDeleteACPCall {
	return _c.Parent.OnDeleteACPRaw(oldVersion, name)
}

func (_c *backendDeleteACPCall) OnUpdateACPRaw(oldVersion interface{}, policy interface{}) *backendUpdateACPCall {
	return _c.Parent.OnUpdateACPRaw(oldVersion, policy)
}

func (_m *backendMock) UpdateACP(_ context.Context, oldVersion string, policy *v1alpha1.AccessControlPolicy) (*acp.ACP, error) {
	_ret := _m.Called(oldVersion, policy)

	if _rf, ok := _ret.Get(0).(func(string, *v1alpha1.AccessControlPolicy) (*acp.ACP, error)); ok {
		return _rf(oldVersion, policy)
	}

	_ra0, _ := _ret.Get(0).(*acp.ACP)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *backendMock) OnUpdateACP(oldVersion string, policy *v1alpha1.AccessControlPolicy) *backendUpdateACPCall {
	return &backendUpdateACPCall{Call: _m.Mock.On("UpdateACP", oldVersion, policy), Parent: _m}
}

func (_m *backendMock) OnUpdateACPRaw(oldVersion interface{}, policy interface{}) *backendUpdateACPCall {
	return &backendUpdateACPCall{Call: _m.Mock.On("UpdateACP", oldVersion, policy), Parent: _m}
}

type backendUpdateACPCall struct {
	*mock.Call
	Parent *backendMock
}

func (_c *backendUpdateACPCall) Panic(msg string) *backendUpdateACPCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *backendUpdateACPCall) Once() *backendUpdateACPCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *backendUpdateACPCall) Twice() *backendUpdateACPCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *backendUpdateACPCall) Times(i int) *backendUpdateACPCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *backendUpdateACPCall) WaitUntil(w <-chan time.Time) *backendUpdateACPCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *backendUpdateACPCall) After(d time.Duration) *backendUpdateACPCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *backendUpdateACPCall) Run(fn func(args mock.Arguments)) *backendUpdateACPCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *backendUpdateACPCall) Maybe() *backendUpdateACPCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *backendUpdateACPCall) TypedReturns(a *acp.ACP, b error) *backendUpdateACPCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *backendUpdateACPCall) ReturnsFn(fn func(string, *v1alpha1.AccessControlPolicy) (*acp.ACP, error)) *backendUpdateACPCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *backendUpdateACPCall) TypedRun(fn func(string, *v1alpha1.AccessControlPolicy)) *backendUpdateACPCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_oldVersion := args.String(0)
		_policy, _ := args.Get(1).(*v1alpha1.AccessControlPolicy)
		fn(_oldVersion, _policy)
	})
	return _c
}

func (_c *backendUpdateACPCall) OnCreateACP(policy *v1alpha1.AccessControlPolicy) *backendCreateACPCall {
	return _c.Parent.OnCreateACP(policy)
}

func (_c *backendUpdateACPCall) OnDeleteACP(oldVersion string, name string) *backendDeleteACPCall {
	return _c.Parent.OnDeleteACP(oldVersion, name)
}

func (_c *backendUpdateACPCall) OnUpdateACP(oldVersion string, policy *v1alpha1.AccessControlPolicy) *backendUpdateACPCall {
	return _c.Parent.OnUpdateACP(oldVersion, policy)
}

func (_c *backendUpdateACPCall) OnCreateACPRaw(policy interface{}) *backendCreateACPCall {
	return _c.Parent.OnCreateACPRaw(policy)
}

func (_c *backendUpdateACPCall) OnDeleteACPRaw(oldVersion interface{}, name interface{}) *backendDeleteACPCall {
	return _c.Parent.OnDeleteACPRaw(oldVersion, name)
}

func (_c *backendUpdateACPCall) OnUpdateACPRaw(oldVersion interface{}, policy interface{}) *backendUpdateACPCall {
	return _c.Parent.OnUpdateACPRaw(oldVersion, policy)
}

// reviewerMock mock of Reviewer.
type reviewerMock struct{ mock.Mock }

// newReviewerMock creates a new reviewerMock.
func newReviewerMock(tb testing.TB) *reviewerMock {
	tb.Helper()

	m := &reviewerMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *reviewerMock) CanReview(ar v1.AdmissionReview) (bool, error) {
	_ret := _m.Called(ar)

	if _rf, ok := _ret.Get(0).(func(v1.AdmissionReview) (bool, error)); ok {
		return _rf(ar)
	}

	_ra0 := _ret.Bool(0)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *reviewerMock) OnCanReview(ar v1.AdmissionReview) *reviewerCanReviewCall {
	return &reviewerCanReviewCall{Call: _m.Mock.On("CanReview", ar), Parent: _m}
}

func (_m *reviewerMock) OnCanReviewRaw(ar interface{}) *reviewerCanReviewCall {
	return &reviewerCanReviewCall{Call: _m.Mock.On("CanReview", ar), Parent: _m}
}

type reviewerCanReviewCall struct {
	*mock.Call
	Parent *reviewerMock
}

func (_c *reviewerCanReviewCall) Panic(msg string) *reviewerCanReviewCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *reviewerCanReviewCall) Once() *reviewerCanReviewCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *reviewerCanReviewCall) Twice() *reviewerCanReviewCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *reviewerCanReviewCall) Times(i int) *reviewerCanReviewCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *reviewerCanReviewCall) WaitUntil(w <-chan time.Time) *reviewerCanReviewCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *reviewerCanReviewCall) After(d time.Duration) *reviewerCanReviewCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *reviewerCanReviewCall) Run(fn func(args mock.Arguments)) *reviewerCanReviewCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *reviewerCanReviewCall) Maybe() *reviewerCanReviewCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *reviewerCanReviewCall) TypedReturns(a bool, b error) *reviewerCanReviewCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *reviewerCanReviewCall) ReturnsFn(fn func(v1.AdmissionReview) (bool, error)) *reviewerCanReviewCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *reviewerCanReviewCall) TypedRun(fn func(v1.AdmissionReview)) *reviewerCanReviewCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_ar, _ := args.Get(0).(v1.AdmissionReview)
		fn(_ar)
	})
	return _c
}

func (_c *reviewerCanReviewCall) OnCanReview(ar v1.AdmissionReview) *reviewerCanReviewCall {
	return _c.Parent.OnCanReview(ar)
}

func (_c *reviewerCanReviewCall) OnReview(ar v1.AdmissionReview) *reviewerReviewCall {
	return _c.Parent.OnReview(ar)
}

func (_c *reviewerCanReviewCall) OnCanReviewRaw(ar interface{}) *reviewerCanReviewCall {
	return _c.Parent.OnCanReviewRaw(ar)
}

func (_c *reviewerCanReviewCall) OnReviewRaw(ar interface{}) *reviewerReviewCall {
	return _c.Parent.OnReviewRaw(ar)
}

func (_m *reviewerMock) Review(_ context.Context, ar v1.AdmissionReview) (map[string]interface{}, error) {
	_ret := _m.Called(ar)

	if _rf, ok := _ret.Get(0).(func(v1.AdmissionReview) (map[string]interface{}, error)); ok {
		return _rf(ar)
	}

	_ra0, _ := _ret.Get(0).(map[string]interface{})
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *reviewerMock) OnReview(ar v1.AdmissionReview) *reviewerReviewCall {
	return &reviewerReviewCall{Call: _m.Mock.On("Review", ar), Parent: _m}
}

func (_m *reviewerMock) OnReviewRaw(ar interface{}) *reviewerReviewCall {
	return &reviewerReviewCall{Call: _m.Mock.On("Review", ar), Parent: _m}
}

type reviewerReviewCall struct {
	*mock.Call
	Parent *reviewerMock
}

func (_c *reviewerReviewCall) Panic(msg string) *reviewerReviewCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *reviewerReviewCall) Once() *reviewerReviewCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *reviewerReviewCall) Twice() *reviewerReviewCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *reviewerReviewCall) Times(i int) *reviewerReviewCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *reviewerReviewCall) WaitUntil(w <-chan time.Time) *reviewerReviewCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *reviewerReviewCall) After(d time.Duration) *reviewerReviewCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *reviewerReviewCall) Run(fn func(args mock.Arguments)) *reviewerReviewCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *reviewerReviewCall) Maybe() *reviewerReviewCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *reviewerReviewCall) TypedReturns(a map[string]interface{}, b error) *reviewerReviewCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *reviewerReviewCall) ReturnsFn(fn func(v1.AdmissionReview) (map[string]interface{}, error)) *reviewerReviewCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *reviewerReviewCall) TypedRun(fn func(v1.AdmissionReview)) *reviewerReviewCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_ar, _ := args.Get(0).(v1.AdmissionReview)
		fn(_ar)
	})
	return _c
}

func (_c *reviewerReviewCall) OnCanReview(ar v1.AdmissionReview) *reviewerCanReviewCall {
	return _c.Parent.OnCanReview(ar)
}

func (_c *reviewerReviewCall) OnReview(ar v1.AdmissionReview) *reviewerReviewCall {
	return _c.Parent.OnReview(ar)
}

func (_c *reviewerReviewCall) OnCanReviewRaw(ar interface{}) *reviewerCanReviewCall {
	return _c.Parent.OnCanReviewRaw(ar)
}

func (_c *reviewerReviewCall) OnReviewRaw(ar interface{}) *reviewerReviewCall {
	return _c.Parent.OnReviewRaw(ar)
}
