/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/traefik/hub-agent/pkg/crd/api/traefik/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TLSOptionLister helps list TLSOptions.
// All objects returned here must be treated as read-only.
type TLSOptionLister interface {
	// List lists all TLSOptions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TLSOption, err error)
	// TLSOptions returns an object that can list and get TLSOptions.
	TLSOptions(namespace string) TLSOptionNamespaceLister
	TLSOptionListerExpansion
}

// tLSOptionLister implements the TLSOptionLister interface.
type tLSOptionLister struct {
	indexer cache.Indexer
}

// NewTLSOptionLister returns a new TLSOptionLister.
func NewTLSOptionLister(indexer cache.Indexer) TLSOptionLister {
	return &tLSOptionLister{indexer: indexer}
}

// List lists all TLSOptions in the indexer.
func (s *tLSOptionLister) List(selector labels.Selector) (ret []*v1alpha1.TLSOption, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TLSOption))
	})
	return ret, err
}

// TLSOptions returns an object that can list and get TLSOptions.
func (s *tLSOptionLister) TLSOptions(namespace string) TLSOptionNamespaceLister {
	return tLSOptionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TLSOptionNamespaceLister helps list and get TLSOptions.
// All objects returned here must be treated as read-only.
type TLSOptionNamespaceLister interface {
	// List lists all TLSOptions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TLSOption, err error)
	// Get retrieves the TLSOption from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TLSOption, error)
	TLSOptionNamespaceListerExpansion
}

// tLSOptionNamespaceLister implements the TLSOptionNamespaceLister
// interface.
type tLSOptionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TLSOptions in the indexer for a given namespace.
func (s tLSOptionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TLSOption, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TLSOption))
	})
	return ret, err
}

// Get retrieves the TLSOption from the indexer for a given namespace and name.
func (s tLSOptionNamespaceLister) Get(name string) (*v1alpha1.TLSOption, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tlsoption"), name)
	}
	return obj.(*v1alpha1.TLSOption), nil
}
